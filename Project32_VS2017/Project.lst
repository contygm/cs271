Microsoft (R) Macro Assembler Version 14.22.27905.0	    08/05/19 19:30:18
*Sorting Random Integers     (program4.asm		     Page 1 - 1


				TITLE Sorting Random Integers     (program4.asm)
				
				; Author: Genevieve Conty
				; Last Modified: 08/05/2019
				; OSU email address: contyg@oregonstate.edu
				; Course number/section: CS271-400
				; Assignment Number: Program #4                Due Date: 08/04/2019
				; Description: Generates random numbers in the range [100 .. 999], display them, 
				; calculate median, sort the numbers and display the sorted list in descending order. 
				
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				
				; ---------------------------------------------
				; constant definitions
				; ---------------------------------------------
				
 = 0000000F			MIN = 15
 = 000000C8			MAX = 200
 = 00000064			LO = 100
 = 000003E7			HI = 999
 = 00000009			MAX_PER_LINE = 9
				
 00000000			.data
				
				; intro prompts
 00000000 53 6F 72 74 69	programTitle    BYTE    "Sorting Random Integers",0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 00
 00000018 50 72 6F 67 72	author          BYTE    "Programmed by Genevieve Conty",0
	   61 6D 6D 65 64
	   20 62 79 20 47
	   65 6E 65 76 69
	   65 76 65 20 43
	   6F 6E 74 79 00
 00000036 54 68 69 73 20	description     BYTE    "This program generates random numbers in the range [100 .. 999], displays the original list, sorts the list, and calculates the median value. Finally, it displays the list sorted in descending order.",0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 20
	   64 69 73 70 6C
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2E 20 46 69 6E
	   61 6C 6C 79 2C
	   20 69 74 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6C 69 73
	   74 20 73 6F 72
	   74 65 64 20 69
	   6E 20 64 65 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 2E 00
				
				; input and result prompts
 000000FE 48 6F 77 20 6D	inputPrompt     BYTE    "How many numbers should be generated? [15 .. 200]: ",0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   35 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 00000132 54 68 65 20 75	unsortedPrompt  BYTE    "The unsorted random numbers: ",0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 00000150 54 68 65 20 6D	medianPrompt    BYTE    "The median is ",0
	   65 64 69 61 6E
	   20 69 73 20 00
 0000015F 54 68 65 20 73	sortedPrompt    BYTE    "The sorted list:",0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 00
				
				; error prompt
 00000170 49 6E 76 61 6C	invalidMsg      BYTE    "Invalid input",0
	   69 64 20 69 6E
	   70 75 74 00
				
				; goodbye prompt
 0000017E 54 68 61 6E 6B	byeMsg       BYTE    "Thanks for using my program!",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 00
				
				; variables
 0000019B 00000000		range           DWORD   ?               ; randomly generated range
 0000019F  000000C8 [		numArr          DWORD   MAX DUP(?)      ; array for random numbers, as big as MAX
	    00000000
	   ]
 000004BF 00000000		numsToGenerate  DWORD   ?               ; user input, how many numbers to be generated
 000004C3 20 20 20 20 20	spaces          BYTE    "     ",0       ; 5 spaces
	   00
 000004C9 00000000		lineIndex		DWORD	0
				
 00000000			.code
 00000000			main PROC
				    
 00000000  E8 00000000 E	    call	RANDOMIZE                   ; need to call at the begining of the prog
 00000005  E8 00000060		    call    introduction
				 
				    ; push ref to numsToGenerate onto stack (esp)
 0000000A  68 000004BF R	    push    OFFSET numsToGenerate       
 0000000F  E8 00000083		    call    getData
				
				    ; put fillArray params into stack
 00000014  FF 35 000004BF R	    push    numsToGenerate
 0000001A  68 0000019F R	    push    OFFSET numArr               ; STACK: @numArr, numsTroGenerate 
 0000001F  E8 000000AD		    call    fillArray                   ; fill with random numbers
				
				    ; display unsorted numbers
 00000024  FF 35 000004BF R	    push    numsToGenerate
 0000002A  68 0000019F R	    push    OFFSET numArr
 0000002F  68 00000132 R	    push    OFFSET unsortedPrompt
 00000034  E8 00000122		    call    displayList                 ; STACK: @ret, @unsortedPrompt, @numArr, numsTroGenerate
				
				    ; calculate and display median
 00000039  FF 35 000004BF R	    push    numsToGenerate
 0000003F  68 0000019F R	    push    OFFSET numArr
 00000044  68 00000150 R	    push    OFFSET medianPrompt
 00000049  E8 000000A8		    call    displayMedian               ; STACK: @ret, @medianPrompt, @numArr, numsTroGenerate
				
				;    push    numsToGenerate
				;    push    OFFSET numArr   
				;    call    sortArray                   ; STACK: @ret, @numArr, numsTroGenerate
				    
				    ; display sorted numbers
 0000004E  FF 35 000004BF R	    push    numsToGenerate
 00000054  68 0000019F R	    push    OFFSET numArr
 00000059  68 0000015F R	    push    OFFSET sortedPrompt        ; STACK: @ret, @sortedPrompt, @numArr, numsTroGenerate
 0000005E  E8 000000F8		    call    displayList
				
					exit	; exit to operating system
 00000063  6A 00	   *	    push   +000000000h
 00000065  E8 00000000 E   *	    call   ExitProcess
 0000006A			main ENDP
				
				; NAME: introduction
				; description: Displays introduction, program title and program description. 
				; parameters (in stack order): none
				; returns: n/a
				; preconditions: n/a
				; registers changed: edx
 0000006A			introduction PROC
 0000006A  BA 00000000 R	    mov     edx, OFFSET programTitle
 0000006F  E8 00000000 E	    call    WriteString
 00000074  E8 00000000 E	    call    CrLf
				
 00000079  BA 00000018 R	    mov     edx, OFFSET author
 0000007E  E8 00000000 E	    call    WriteString
 00000083  E8 00000000 E	    call    CrLf
				
 00000088  BA 00000036 R	    mov     edx, OFFSET description
 0000008D  E8 00000000 E	    call    WriteString
 00000092  E8 00000000 E	    call    CrLf
				
 00000097			introduction ENDP
				
				; NAME: getData
				; description: Display input prompt, ensure user's input is within MIN and MAX, 
				;   gets how many numbers the user wants to generate
				; parameters (in stack order): numsToGenerate (by reference),  MIN (global constant),
				;   MAX (global constant)
				; returns: number of integers to be generated
				; preconditions: none
				; registers changed: ebp, ebx, esp, edx, eax
 00000097			getData PROC
				
				    ; set up stack
 00000097  55			    push    ebp             
 00000098  8B EC		    mov     ebp, esp
 0000009A  8B 5D 08		    mov     ebx, [ebp+8]        ; put @numsToGenerate ref into EBX
				    ; STACK: ebp, ret@, @numsToGen
				
				    ; --------------------------------------------
				    ; Get input from user. Check that user input 
				    ; is between MAX and MIN. 
				    ; --------------------------------------------
 0000009D			    inputLoop:
 0000009D  BA 000000FE R	        mov		edx, OFFSET inputPrompt
 000000A2  E8 00000000 E	        call	WriteString
 000000A7  E8 00000000 E	        call	ReadInt
				
				        ; validate that user input is between MIN/MAX
 000000AC  3D 000000C8		        cmp		eax, MAX		    ; if input > MAX
 000000B1  7F 07		        jg		displayErrorMsg		
 000000B3  83 F8 0F		        cmp		eax, MIN		    ; if input < MIN
 000000B6  7C 02		        jl		displayErrorMsg
 000000B8  EB 11		        jmp		valid
				
				    ; --------------------------------------------
				    ; Display error message for failed validation
				    ; --------------------------------------------
 000000BA			    displayErrorMsg:
 000000BA  BA 00000170 R	        mov		edx, OFFSET invalidMsg
 000000BF  E8 00000000 E	        call	WriteString
 000000C4  E8 00000000 E	        call	CrLf
 000000C9  EB D2		        jmp		inputLoop       ; loop back to top of inputLoop
				
				    ; --------------------------------------------
				    ; When input is valid, reset stack and return
				    ; --------------------------------------------
 000000CB			    valid:
 000000CB  89 03		        mov		[ebx], eax      ; put user input into numsToGen
 000000CD  5D			        pop     ebp             ; STACK: ret@, @numsToGen
 000000CE  C2 0004		        ret     4               ; pop off @numsToGen
				
 000000D1			getData ENDP
				
				; NAME: fillArray
				; description: Fill the array (numArr) with random numbers. Amount of elements 
				;   numsToGenerate will equal.
				; parameters (in stack order): @numArr, numsTroGenerate
				; returns: numArr filled with the user's requested amount of random numbers
				; preconditions: TODO numsToGenerate != NULL, count = 0, numArr is empty, LO < HI
				; registers changed: ebp, edp, ecx, edi, eax
 000000D1			fillArray PROC      ; TODO
				
				    ; STACK: @ret, @numArr, numsTroGenerate
				    ; set up stack
 000000D1  55			    push    ebp                 ; STACK: ebp, @ret, @numArr, numsTroGenerate
 000000D2  8B EC		    mov     ebp, esp
 000000D4  8B 4D 0C		    mov     ecx, [ebp+12]        ; put numsToGenerate into ECX
 000000D7  8B 7D 08		    mov     edi, [ebp+8] 
				
				    ; --------------------------------------------
				    ; Generate random integers between HI and LO. 
				    ; Fill numArr with user's requested amount of 
				    ; random numbers. 
				    ; --------------------------------------------
 000000DA			    genRandomIntLoop:
 000000DA  B8 000003E7		        mov     eax, HI         ; generate random number, from lecture 20
 000000DF  83 E8 64		        sub     eax, LO
 000000E2  40			        inc     eax
 000000E3  E8 00000000 E	        call    RandomRange
 000000E8  83 C0 64		        add     eax, LO
 000000EB  89 07		        mov     [edi], eax      ; put random value into numArr
 000000ED  83 C7 04		        add     edi, 4          ; increment to next index
 000000F0  E2 E8		        loop    genRandomIntLoop
				       
 000000F2  5D			        pop     ebp             ; STACK: @ret, @numArr, numsTroGenerate
 000000F3  C2 0008		        ret     8               ; pop off numsTroGenerate, @numArr
				
 000000F6			fillArray ENDP
				
				; NAME: sortArray
				; description: TODO
				; parameters (in stack order): TODO
				; returns: TODO
				; preconditions: TODO
				; registers changed: TODO
				;
				;for (k=0; k<request-1; k++) {
				;   i = k;
				;   for (j=k+1; j<request; j++) {
				;      if (array[j] > array[i])
				;         i = j;
				;   }
				;   exchange(array[k], array[i]);
				;}
				;
 000000F6			sortArray PROC      ; TODO
				
				;    push    ebp                 ; STACK: ebp, @ret, @numArr, numsTroGenerate
				;    mov     ebp, esp
				;    mov     ecx, [ebp+12]       ; put numsToGenerate into ECX
				;    dec     ecx                 ; adjust for index
				;    mov     edi, [ebp+8] 
				
				    ; --------------------------------------------
				    ; TODO: for (k=0; k<request-1; k++) i = k;
				    ; --------------------------------------------
				 ;   outerLoop: 
				        
				 ;       push    ecx             ; STACK: k (ecx), ebp, @ret, @numArr, numsTroGenerate
				 ;       mov     esi, [ebp+12]
				
				        ; exchange(array[k], array[i]
				    
				    ; --------------------------------------------
				    ; TODO: desc
				    ; --------------------------------------------
				 ;   swapElements: 
				;        loop    outerLoop
				
				    ; --------------------------------------------
				    ; TODO: for (j=k+1; j<request; j++)
				    ; --------------------------------------------
				 ;   innerLoop: 
				        ; if (array[j] > array[i]) i = j;
				 ;       mov		eax, [esi]
				
				    
				
 000000F6			sortArray ENDP
				
				; NAME: displayMedian
				; description: TODO
				; parameters (in stack order): @medianPrompt, @numArr, numsTroGenerate
				; returns: TODO
				; preconditions: TODO
				; registers changed: TODO
 000000F6			displayMedian PROC 
				
				    ; set up stack frame
 000000F6  55			    push    ebp                 ; STACK: ebp, @ret, @medianPrompt, @numArr, numsTroGenerate
 000000F7  8B EC		    mov     ebp, esp
 000000F9  8B 45 10		    mov     eax, [ebp+16]        ; put numsToGenerate into EAX
 000000FC  8B 75 0C		    mov     esi, [ebp+12] 
 000000FF  BA 00000000		    mov     edx, 0
				
				    ; median = (n + 1) / 2
 00000104  B8 00000001		    mov     eax, 1
 00000109  BB 00000002			mov		ebx, 2
 0000010E  F7 F3		    div     ebx
 00000110  83 FA 00		    cmp     edx, 0
 00000113  74 20		    je      oddMedian
				
				    ; --------------------------------------------
				    ; Find median for even array lengths
				    ; --------------------------------------------
 00000115			    evenMedian:
				    ; get first number
 00000115  BB 00000004			mov		ebx, 4
 0000011A  F7 E3		    mul     ebx         ; multiply eax by 4 
 0000011C  03 F0		    add     esi, eax
 0000011E  8B 16		    mov     edx, [esi]  ; put 1st num in edx
				
				    ; get second number
 00000120  83 C6 04		    add     esi, 4
 00000123  8B 06		    mov     eax, [esi]  ; put 2nd num in eax
				
				    ; find average of two numbers
 00000125  03 C2		    add     eax, edx    ; add both numbers together
 00000127  BA 00000000		    mov     edx, 0      ; reset edx
 0000012C  BB 00000002			mov		ebx, 2
 00000131  F7 F3		    div     ebx         ; divide sum by 2
				
 00000133  EB 0B		    jmp     printMedian
				
				    ; --------------------------------------------
				    ; Retrieve odd median (middle of array)
				    ; --------------------------------------------
 00000135			    oddMedian:
 00000135  BB 00000004		        mov		ebx, 4
 0000013A  F7 E3				mul     ebx           ; multiply eax by 4
 0000013C  03 F0		        add     esi, eax
 0000013E  8B 06		        mov     eax, [esi]
				
				    ; --------------------------------------------
				    ; Print the median (eax)
				    ; --------------------------------------------
 00000140			    printMedian:
 00000140  E8 00000000 E	        call    CrLf
 00000145  8B 55 08		        mov     edx, [ebp+8]
 00000148  E8 00000000 E	        call    WriteString
 0000014D  E8 00000000 E	        call	WriteDec
 00000152  E8 00000000 E	        call    CrLf
				
 00000157  5D			    pop     ebp
 00000158  C2 000C		    ret     12
				
 0000015B			displayMedian ENDP
				
				; NAME: displayList
				; description: TODO
				; parameters (in stack order): @prompt, @numArr, numsTroGenerate
				; returns: TODO
				; preconditions: TODO
				; registers changed: TODO
 0000015B			displayList PROC        ; TODO
				
 0000015B  55			    push    ebp     ; STACK: ebp, @ret, @prompt, @numArr, numsTroGenerate
 0000015C  8B EC		    mov     ebp, esp
 0000015E  8B 4D 10		    mov     ecx, [ebp+16]        ; put numsToGenerate into ECX
 00000161  8B 75 0C		    mov     esi, [ebp+12]        ; put numArr into esi
				
				    ; display prompt
 00000164  E8 00000000 E	    call    CrLf
 00000169  8B 55 08		    mov     edx, [ebp+8]         ; put prompt into edx
 0000016C  E8 00000000 E	    call    WriteString
 00000171  E8 00000000 E	    call    CrLf
 00000176  BA 00000000		    mov     edx, 0
				
				    ; --------------------------------------------
				    ; Loop through numArr and print each integer
				    ; --------------------------------------------
 0000017B			    printInt:
				        ; print int and spacing
 0000017B  8B 04 16		        mov		eax, [esi+edx]
 0000017E  E8 00000000 E	        call	WriteDec
 00000183  BA 000004C3 R	        mov		edx, OFFSET spaces
 00000188  E8 00000000 E	        call	WriteString
				
				        ; increment indexes
 0000018D  83 C2 04		        add		edx, 4
 00000190  FF 05 000004C9 R	        inc		lineIndex
				
				        ; print new line if needed
 00000196  83 3D 000004C9 R	        cmp		lineIndex, MAX_PER_LINE
	   09
 0000019D  7F 0E		        jg		newLine
 0000019F  E2 DA		        loop	printInt
				        
 000001A1  C7 05 000004C9 R	        mov		lineIndex, 0            ; reset lineIndex
	   00000000
 000001AB  EB 11		        jmp		stopPrint
				
				    ; --------------------------------------------
				    ; Make new line after reaching MAX_PER_LINE 
				    ;   index
				    ; --------------------------------------------
 000001AD			    newLine:
 000001AD  E8 00000000 E	        call	CrLf
 000001B2  C7 05 000004C9 R	        mov		lineIndex, 0            ; reset lineIndex
	   00000000
 000001BC  E2 BD		        loop	printInt
				
				    ; --------------------------------------------
				    ; Stop printing process, clear register, and 
				    ;   exit function
				    ; --------------------------------------------
 000001BE			    stopPrint:
 000001BE  5D			        pop     ebp         ; STACK: @ret, @prompt, @numArr, numsTroGenerate
 000001BF  C2 000C		        ret     12
				
 000001C2			displayList ENDP
				
				; NAME: goodbye
				; description: TODO
				; parameters (in stack order): TODO
				; returns: TODO
				; preconditions: TODO
				; registers changed: TODO
 000001C2			goodbye		PROC        ; TODO
 000001C2  BA 0000017E R		mov		edx, OFFSET byeMsg
 000001C7  E8 00000000 E		call	WriteString
 000001CC  C3				ret
 000001CD			goodbye		ENDP
				
				END main
Microsoft (R) Macro Assembler Version 14.22.27905.0	    08/05/19 19:30:18
*Sorting Random Integers     (program4.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004CD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001CD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 0000015B _TEXT	Length= 00000067 Public STDCALL
  printInt . . . . . . . . . . .	L Near	 0000017B _TEXT	
  newLine  . . . . . . . . . . .	L Near	 000001AD _TEXT	
  stopPrint  . . . . . . . . . .	L Near	 000001BE _TEXT	
displayMedian  . . . . . . . . .	P Near	 000000F6 _TEXT	Length= 00000065 Public STDCALL
  evenMedian . . . . . . . . . .	L Near	 00000115 _TEXT	
  oddMedian  . . . . . . . . . .	L Near	 00000135 _TEXT	
  printMedian  . . . . . . . . .	L Near	 00000140 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000D1 _TEXT	Length= 00000025 Public STDCALL
  genRandomIntLoop . . . . . . .	L Near	 000000DA _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000097 _TEXT	Length= 0000003A Public STDCALL
  inputLoop  . . . . . . . . . .	L Near	 0000009D _TEXT	
  displayErrorMsg  . . . . . . .	L Near	 000000BA _TEXT	
  valid  . . . . . . . . . . . .	L Near	 000000CB _TEXT	
goodbye  . . . . . . . . . . . .	P Near	 000001C2 _TEXT	Length= 0000000B Public STDCALL
introduction . . . . . . . . . .	P Near	 0000006A _TEXT	Length= 0000002D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006A Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortArray  . . . . . . . . . . .	P Near	 000000F6 _TEXT	Length= 00000000 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX_PER_LINE . . . . . . . . . .	Number	 00000009h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Fh   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
author . . . . . . . . . . . . .	Byte	 00000018 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byeMsg . . . . . . . . . . . . .	Byte	 0000017E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description  . . . . . . . . . .	Byte	 00000036 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputPrompt  . . . . . . . . . .	Byte	 000000FE _DATA	
invalidMsg . . . . . . . . . . .	Byte	 00000170 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineIndex  . . . . . . . . . . .	DWord	 000004C9 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianPrompt . . . . . . . . . .	Byte	 00000150 _DATA	
numArr . . . . . . . . . . . . .	DWord	 0000019F _DATA	
numsToGenerate . . . . . . . . .	DWord	 000004BF _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
range  . . . . . . . . . . . . .	DWord	 0000019B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortedPrompt . . . . . . . . . .	Byte	 0000015F _DATA	
spaces . . . . . . . . . . . . .	Byte	 000004C3 _DATA	
unsortedPrompt . . . . . . . . .	Byte	 00000132 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
